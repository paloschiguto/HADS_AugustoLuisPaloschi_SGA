datasource db {
  provider = "postgresql"
  url = env("DB_URL_CONECT")
}

generator client {
  provider = "prisma-client-js"
}

// Tipos de usuário
model TipoDeUsuario {
  id          Int       @id @default(autoincrement())
  descricao   String
  createdBy   Int
  createdOn   DateTime @default(now())
  modifiedBy  Int?
  modifiedOn  DateTime?

  usuarios    Usuario[]
  permissoes  Permissao[] @relation("TipoPermissoes")
}

// Usuários do sistema
model Usuario {
  id          Int       @id @default(autoincrement())
  nome        String
  email       String    @unique
  senha       String
  ativo       Boolean @default(true)
  tpUsuId     Int
  createdBy   Int
  createdOn   DateTime @default(now())
  modifiedBy  Int?
  modifiedOn  DateTime?

  tipo        TipoDeUsuario @relation(fields: [tpUsuId], references: [id])
  atendimentos Atendimento[]
  pacientes     Paciente[]
  passwordResets PasswordReset[]
}

// Pacientes
model Paciente {
  id          Int       @id @default(autoincrement())
  nome        String
  ativo       Boolean @default(true)
  dataNasc    DateTime?
  respId      Int?
  createdBy   Int
  createdOn   DateTime @default(now())
  modifiedBy  Int?
  modifiedOn  DateTime?

  responsavel Usuario? @relation(fields: [respId], references: [id])
  atendimentos Atendimento[]
}

// Medicamentos
model Medicamento {
  id          Int       @id @default(autoincrement())
  descricao   String
  dosagem     String
  ativo       Boolean @default(true)
  createdBy   Int
  createdOn   DateTime @default(now())
  modifiedBy  Int?
  modifiedOn  DateTime?

  atendimentos MedicamentosAtend[]
}

model Atendimento {
  id          Int       @id @default(autoincrement())
  descricao   String
  obs         String?
  finalizado  Boolean
  usuId       Int
  pacId       Int
  createdBy   Int
  createdOn   DateTime  @default(now())
  modifiedBy  Int?
  modifiedOn  DateTime?

  usuario     Usuario @relation(fields: [usuId], references: [id])
  paciente    Paciente @relation(fields: [pacId], references: [id])
  medicamentos MedicamentosAtend[]
}

model MedicamentosAtend {
  id         Int       @id @default(autoincrement())
  atendId    Int
  medId      Int
  qtde       Int
  createdBy  Int
  createdOn  DateTime  @default(now())
  modifiedBy Int?
  modifiedOn DateTime?

  atendimento Atendimento @relation(fields: [atendId], references: [id], onDelete: Cascade)
  medicamento Medicamento @relation(fields: [medId], references: [id])
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  usuId      Int
  codigo     String
  used       Boolean  @default(false)
  created_on DateTime @default(now())

  usuario    Usuario  @relation(fields: [usuId], references: [id], onDelete: Cascade)
}

// Permissões
model Permissao {
  id          Int       @id @default(autoincrement())
  nome        String    @unique
  tipos       TipoDeUsuario[] @relation("TipoPermissoes")
}